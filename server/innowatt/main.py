from fastapi import FastAPI
from pydantic import BaseModel

from typing import Union

from innowatt.firestore import Firestore
from innowatt.chat_engine import ChatEngine

app = FastAPI()

@app.post('/chat/{chat_id}')
def send_response(chat_id: str):
    '''Sending a response generated by chatbot'''
    firestore = Firestore(chat_id=chat_id)
    chat_engine = ChatEngine()
    
    # Getting the last 20 messages
    last_messages = firestore.last_n_messages(n=20)
    last_messages = [('Bot: ' if message['author_id'] == 'bot_id' else 'User: ' ) + "\'" + message['text'] + "\'" for message in last_messages]

    summary = firestore.get_summary()

    messages_count = firestore.messages_count()

    if chat_engine.should_summarize(messages_count=messages_count):
        new_summary = chat_engine.summarize(new_messages=last_messages, prev_summary=summary)
        firestore.update_summary(str(new_summary.text))

    # TODO: finish the replied_to message functionality

    # Get response from LLM
    response = chat_engine.generate_response(
        query=last_messages[0],
        summary=summary,
        last_messages=last_messages
    )
    firestore.send_message(str(response))

    # Add the result to Firestore